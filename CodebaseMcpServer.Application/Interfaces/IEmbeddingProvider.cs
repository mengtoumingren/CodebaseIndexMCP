using System.Collections.Generic;
using System.Threading.Tasks;

namespace CodebaseMcpServer.Application.Interfaces
{
    /// <summary>
    /// Defines the contract for an embedding provider.
    /// </summary>
    public interface IEmbeddingProvider
    {
        /// <summary>
        /// Gets the name of the embedding provider.
        /// </summary>
        string ProviderName { get; }

        /// <summary>
        /// Gets embeddings for a list of texts.
        /// </summary>
        /// <param name="texts">The list of texts to get embeddings for.</param>
        /// <returns>A list of embedding vectors.</returns>
        Task<List<List<float>>> GetEmbeddingsAsync(List<string> texts);

        /// <summary>
        /// Gets the maximum batch size allowed by the provider.
        /// </summary>
        /// <returns>The maximum batch size.</returns>
        int GetMaxBatchSize();

        /// <summary>
        /// Gets the maximum token length per text allowed by the provider.
        /// </summary>
        /// <returns>The maximum token length.</returns>
        int GetMaxTokenLength();

        /// <summary>
        /// Gets the dimension of the embeddings generated by the provider.
        /// </summary>
        /// <returns>The embedding dimension.</returns>
        int GetEmbeddingDimension();

        /// <summary>
        /// Validates the provider's configuration.
        /// </summary>
        /// <returns>True if the configuration is valid, otherwise false.</returns>
        bool ValidateConfiguration();
    }
}
