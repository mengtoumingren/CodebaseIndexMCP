using System.Text.Json.Serialization;

namespace CodebaseMcpServer.Services.Embedding.Models
{
    /// <summary>
    /// Represents settings for a specific embedding provider.
    /// This class is designed to be flexible to accommodate various provider-specific settings.
    /// </summary>
    public class EmbeddingProviderSettings
    {
        /// <summary>
        /// The API key for the embedding provider.
        /// </summary>
        [JsonPropertyName("apiKey")]
        public string? ApiKey { get; set; }

        /// <summary>
        /// The base URL for the provider's API.
        /// </summary>
        [JsonPropertyName("baseUrl")]
        public string? BaseUrl { get; set; }

        /// <summary>
        /// The specific model to use (e.g., "text-embedding-v4", "text-embedding-3-small").
        /// </summary>
        [JsonPropertyName("model")]
        public string? Model { get; set; }

        /// <summary>
        /// The maximum number of texts that can be processed in a single batch request.
        /// </summary>
        [JsonPropertyName("maxBatchSize")]
        public int MaxBatchSize { get; set; } = 10; // Default value, can be overridden in config

        /// <summary>
        /// The maximum number of tokens allowed for a single input text.
        /// </summary>
        [JsonPropertyName("maxTokenLength")]
        public int MaxTokenLength { get; set; } = 8192; // Default value

        /// <summary>
        /// The dimension of the embedding vectors generated by this model.
        /// </summary>
        [JsonPropertyName("embeddingDimension")]
        public int EmbeddingDimension { get; set; } = 1024; // Default value

        /// <summary>
        /// API request timeout in milliseconds.
        /// </summary>
        [JsonPropertyName("timeout")]
        public int Timeout { get; set; } = 30000; // Default 30 seconds

        /// <summary>
        /// Optional: API version, required by some providers like Azure OpenAI.
        /// </summary>
        [JsonPropertyName("apiVersion")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? ApiVersion { get; set; } = null;

        /// <summary>
        /// Optional: Deployment name or specific resource identifier, used by Azure OpenAI.
        /// </summary>
        [JsonPropertyName("deploymentName")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? DeploymentName { get; set; } = null;

        // Add other provider-specific settings as needed, using JsonIgnore for optional ones.
    }
}